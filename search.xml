<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring</title>
      <link href="/posts/Spring/"/>
      <url>/posts/Spring/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="第1章-Spring概述"><a href="#第1章-Spring概述" class="headerlink" title="第1章 Spring概述"></a><center>第1章 Spring概述</center></h1><h2 id="sping简述"><a href="#sping简述" class="headerlink" title="sping简述"></a>sping简述</h2><ul><li><p>一个轻量级框架，核心技术是ioc，aop，针对接口编程，实现解耦合。</p></li><li><p>一个容器，储存java对象的容器，需要做的是把对象放入到容器中</p></li><li><p>方便集成各种优秀框架</p><blockquote><p>Spring 不排斥各种优秀的开源框架，相反 Spring 可以降低各种框架的使用难度，Spring提供了对各种优秀框架（如 Struts,Hibernate、MyBatis）等的直接支持。简化框架的使用。Spring 像插线板一样，其他框架是插头，可以容易的组合到一起。需要使用哪个框架，就把这个插头放入插线板。不需要可以轻易的移除。</p></blockquote></li><li><p><a href="https://spring.io/" target="_blank" rel="noopener">spring官网</a> ，<a href="https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference" target="_blank" rel="noopener">spring中文文档</a></p></li></ul><h2 id="怎么使用spring"><a href="#怎么使用spring" class="headerlink" title="怎么使用spring"></a>怎么使用spring</h2><ol><li>spring是一个容器，把项目中用的对象放入到容器中</li><li>让容器完成对象的创建，对象之间关系的管理（属性赋值）</li><li>我们在程序中从容器中获取 要使用的对象</li></ol><h2 id="不放入到spring容器中的对象"><a href="#不放入到spring容器中的对象" class="headerlink" title="不放入到spring容器中的对象"></a>不放入到spring容器中的对象</h2><ol><li>实体类对象，实体类数据来自数据库的</li><li>servlet， listener， filter等由Tomcat管理的</li></ol><h2 id="什么样的对象放入容器中"><a href="#什么样的对象放入容器中" class="headerlink" title="什么样的对象放入容器中"></a>什么样的对象放入容器中</h2><ul><li>dao类，service类，controller类，工具类<ol><li>xml配置文件，使用<code>&lt;bean&gt;</code></li><li>注解</li></ol></li><li>spring中的对象默认都是单例的，在容器中叫这个名称的对象只有一个</li></ul><h2 id="使用spring框架的步骤"><a href="#使用spring框架的步骤" class="headerlink" title="使用spring框架的步骤"></a>使用spring框架的步骤</h2><ol><li><p>加入依赖</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建类：接口，实现类，没有接口的类</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span>  <span class="keyword">implements</span> <span class="title">SomeService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SomeServiceImpl 启动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建spring的配置文件，使用<bean>声明对象</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--xsd 是约束文件的扩展名  xsd 的约束文件功能强，验证比较全面--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明java对象交给Spring创建和管理</span></span><br><span class="line"><span class="comment">          class：类的全限定名称，不能是接口（Spring使用反射创建对象）</span></span><br><span class="line"><span class="comment">          id：自定义的对象名称，要求是唯一值。表示在Spring中的对象名称，</span></span><br><span class="line"><span class="comment">              通过这个名称可以从Spring中找到对象。获取对象</span></span><br><span class="line"><span class="comment">           对象是放入到Spring的容器（Map&lt;id,对象&gt;）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"someService"</span> <span class="attr">class</span>=<span class="string">"com.test.service.SomeServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--&lt;bean&gt;等同于SomeService someService = new SomServiceImpl();--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>我们使用容器中的对象，通过ApplicationContext接口和他的实现类ClassPathXmlApplcactionContext的方法getBean()</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">     System.out.println( <span class="string">"Hello World!"</span> );</span><br><span class="line">     <span class="comment">//定义Spring的配置文件</span></span><br><span class="line">     String config=<span class="string">"applicationContext.xml"</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//创建Spring的容器对象，根据Spring配置文件的位置，使用接口的不同实现类</span></span><br><span class="line">     <span class="comment">//如果Spring配置文件位置是在类路径下（classpath）</span></span><br><span class="line">     ApplicationContext ctx= <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"><span class="comment">//根目录下    ApplicationContext ctx = new FileSystemXmlApplicationContext(config);</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//创建容器对象时，就把配置文件的所有对象都创建出来，放到容器中，需要时再取出来</span></span><br><span class="line">     SomeService service= (SomeService) ctx.getBean(<span class="string">"someService"</span>);</span><br><span class="line">     <span class="comment">//调用业务的方法</span></span><br><span class="line">     service.doSome();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="第2章-IOC-控制反转"><a href="#第2章-IOC-控制反转" class="headerlink" title="第2章 IOC 控制反转"></a><center>第2章 IOC 控制反转</center></h1><blockquote><p>控制反转（IoC，Inversion of Control），是一个概念，是一种思想。指将传统上由程序代码直接操控的对象调用权交给容器，通过容器来实现对象的装配和管理。控制反转就是对对象控制权的转移，从程序代码本身反转到了外部容器。通过容器实现对象的创建，属性赋值，依赖的管理。</p></blockquote><ul><li><p><strong>描述</strong>：把对象的创建，赋值，管理工作都交给代码之外的容器实现，也就是对象的创建是有其它外部资源完成</p></li><li><p><strong>控制</strong>： 创建对象，对象的属性赋值，对象之间的关系管理。</p></li><li><p><strong>反转</strong>： 把原来的开发人员管理，创建对象的权限转移给代码之外的容器实现。 由容器代替开发人员管理对象。创建对象，给属性赋值。</p></li><li><p><strong>正转</strong>：由开发人员在代码中，使用new 构造方法创建对象， 开发人员主动管理对象。</p><pre><code>public static void main(String args[]){    Student student = new Student(); // 在代码中， 创建对象。--正转。 }</code></pre></li></ul><h2 id="ioc技术实现使用的DI（依赖注入）"><a href="#ioc技术实现使用的DI（依赖注入）" class="headerlink" title="ioc技术实现使用的DI（依赖注入）"></a>ioc技术实现使用的DI（依赖注入）</h2><ul><li>Spring 容器是一个超级大工厂，负责创建、管理所有的 Java 对象，这些 Java 对象被称为 Bean。Spring 容器管理着容器中 Bean 之间的依赖关系，Spring 使用“依赖注入”的方式来管理 Bean 之间的依赖关系。使用 IoC 实现对象之间的解耦和。<br>  <strong>开发人员在项目中只需要提供对象的名称， 对象的创建，查找，赋值都由容器内部自己实现</strong><br>  <strong>(spring使用di的技术， 底层使用的是反射机制)</strong></li></ul><ul><li>为什么要使用 ioc ： <code>目的就是减少对代码的改动， 也能实现不同的功能。 实现解耦合</code></li></ul><h2 id="基于xml的DI"><a href="#基于xml的DI" class="headerlink" title="基于xml的DI"></a>基于xml的DI</h2><h3 id="set注入"><a href="#set注入" class="headerlink" title="set注入"></a>set注入</h3><ul><li>spring调用类的set方法实现属性赋值</li></ul><ol><li>简单类型的set注入<property name="属性名" value="属性的值" /> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.text.pack01.Student"</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过set方法注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>  <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>引用类型的set注入<proper name="属性名" ref="bean的id" /> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"school"</span> <span class="attr">ref</span>=<span class="string">"school"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h3><ul><li>spring调用有参数构造方法</li></ul><ol><li><code>&lt;constructor-arg&gt;</code>的name属性，name表示构造方法的形参名</li><li><code>&lt;constructor-arg&gt;</code>的index属性，表示构造方法形参的位置，从0开始</li></ol><h3 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h3><ol><li>byName: 按名称注入， java类中引用类型的<strong>【属性名】</strong>和spring容器中bean的<strong>【id】</strong>一样，数据类型一样。这样的bean赋值给引用类型<br> <code>&lt;bean id=&quot;student&quot; class=&quot;com.text.pack01.Student&quot; autowire=&quot;byName&quot;&gt;</code></li></ol><ol start="2"><li>byType：按类型注入，java类中引用类型的是<strong>【数据类型】</strong>和spring容器中bean的<strong>【class】</strong>是同源关系的，这样的bean能够赋值给引用类型</li></ol><h2 id="基于注解的DI"><a href="#基于注解的DI" class="headerlink" title="基于注解的DI"></a>基于注解的DI</h2><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ol><li><strong>@Component</strong> 创建对象</li><li><strong>@Repository</strong> 创建dao对象，用来访问数据库的</li><li><strong>@Service</strong> 创建Service对象， 处理业务逻辑的，可以有事务功能</li><li><strong>@Controller</strong> 创建控制器对象的， 接收请求，显示处理结果的</li><li><strong>@Value</strong> 简单类型的属性赋值</li><li><strong>@Autowired</strong> spring框架中引用类型的赋值注解， 支持byName,byType,默认是byType</li><li><strong>@Resource</strong> jdk中的注解，spring框架提供了对这个注解的功能支持,使用自动注入给引用类型赋值，<br>支持byName，byType，默认是byName</li></ol><h3 id="注解的使用步骤："><a href="#注解的使用步骤：" class="headerlink" title="注解的使用步骤："></a>注解的使用步骤：</h3><ol><li>加入依赖 ：spring-context, 间接加入spring-aop</li><li>在类中加入注解 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用注解创建对象 默认类的第一个字母小写</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可以在属性上，也可以在set方法上</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"李四"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"20"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Resource  设置byType @Resource（name=byType）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Autowired 默认byType  用byName加@Qualifier注解</span></span><br><span class="line">    <span class="comment">//@Autowired(required=true) 默认true 注入失败报错，required=false 注入失败值为null。</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"mySchool"</span>)<span class="comment">//设置byName</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li>在spring的配置文件中，加入组件扫描器的标签 &lt;context:component-scan base-package=”包名”&gt;</li></ol><h2 id="ioc能实现解耦合"><a href="#ioc能实现解耦合" class="headerlink" title="ioc能实现解耦合"></a>ioc能实现解耦合</h2><blockquote><p>ioc能够实现业务对象之间的解耦合， 例如service和dao对象之间的解耦合。</p></blockquote><h1 id="第3章-AOP-面向切面编程"><a href="#第3章-AOP-面向切面编程" class="headerlink" title="第3章 AOP 面向切面编程"></a><center>第3章 AOP 面向切面编程</center></h1><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><blockquote><p><a href="https://www.jianshu.com/p/9cdcf4e5c27d" target="_blank" rel="noopener">动态代理是指</a>， 程序在整个运行过程中根本就不存在目标类的代理类，目标对象的代理<br>对象只是由代理生成工具（不是真实定义的类）在程序运行时由 JVM 根据反射等机制动态<br>生成的。代理对象与目标对象的代理关系在程序运行时才确立。</p></blockquote><h3 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h3><p>使用jdk反射包中的类实现创建代理对象的功能<br>要求：目标类必须实现接口<br>    <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaiLi</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="comment">//目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DaiLi</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代理类的业务方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        SqlSession session=<span class="keyword">null</span>;</span><br><span class="line">        Object obj=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session= SqlSessionUtil.getSession();</span><br><span class="line">            <span class="comment">//处理业务逻辑</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//真实对象的业务方法</span></span><br><span class="line">            obj=method.invoke(target,args);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理业务逻辑完毕</span></span><br><span class="line">            session.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//异常回滚</span></span><br><span class="line">            session.rollback();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            SqlSessionUtil.closeSession(session);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h3><p>使用第三方的工具库，实现代理对象的创建<br>要求：目标类必须能够继承，不能是final<br>原理：就是继承，子类就是代理</p><h3 id="动态代理作用"><a href="#动态代理作用" class="headerlink" title="动态代理作用"></a>动态代理作用</h3><ol><li>在目标类不修改源代码的情况下，增加功能</li><li>减少重复的代码</li><li>专注业务功能的实现</li><li>解耦合： 业务功能和日志，事务这些非业务功能的耦合</li></ol><h2 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h2><ul><li>面向切面编程， 基于动态代理的，可以使用jdk，cglib两种代理方式。<br>Aop就是动态代理的规范化， 把动态代理的实现步骤，方式都定义好了，<br>让开发人员用一种统一的方式，使用动态代理。</li><li>怎么理解面向切面编程 ？<br>1)需要在分析项目功能时，找出切面。<br>2)合理的安排切面的执行时间（在目标方法前， 还是目标方法后）<br>3)合理的安全切面执行的位置，在哪个类，哪个方法增加增强功能</li></ul><h2 id="AOP-编程术语-掌握"><a href="#AOP-编程术语-掌握" class="headerlink" title="AOP 编程术语(掌握)"></a>AOP 编程术语(掌握)</h2><ol><li>aspect：切面，表示给业务方法增加的功能，一般日志输出，事务，权限检查等是切面</li><li>JoinPoint：连接点，连接点指可以被切面织入的具体方法。通常业务接口中的方法均为连接点。</li><li>pointcut:切入点，是一个或多个JoinPoint的集合，表示切面功能执行的位置</li><li>Target：目标对象，目标对象指将要被增强的对象 ，即包含主业务逻辑的类的对象 。</li><li>advice：通知，也叫增强，表示切面执行的时间，在方法前，方法后等等</li></ol><h2 id="什么时候考虑使用AOP技术"><a href="#什么时候考虑使用AOP技术" class="headerlink" title="什么时候考虑使用AOP技术"></a>什么时候考虑使用AOP技术</h2><ol><li>当你要给一个系统中存在的类修改功能，但是原有类的功能不完善，但是你还有源代码，使用aop就增加功能</li><li>你要给项目中的多个类，增加一个相同的功能，使用aop</li><li>给业务方法增加事务， 日志输出</li></ol><h2 id="AOP的实现框架"><a href="#AOP的实现框架" class="headerlink" title="AOP的实现框架"></a>AOP的实现框架</h2><ol><li>spring实现了aop， 实现方式是接口</li><li><a href="http://www.eclipse.org/aspectj/" target="_blank" rel="noopener">aspectj框架</a> （一个优秀面向切面的框架，它扩展了 Java 语言，提供了强大的切面实现。）<ol><li>使用注解可以实现aop的功能</li><li>使用xml配置文件中的标签实现aop功能</li></ol></li></ol><h2 id="aspectj框架的使用"><a href="#aspectj框架的使用" class="headerlink" title="aspectj框架的使用"></a>aspectj框架的使用</h2><h3 id="表示切面位置的切入点表达式"><a href="#表示切面位置的切入点表达式" class="headerlink" title="表示切面位置的切入点表达式"></a>表示切面位置的切入点表达式</h3><p>execution(访问修饰符 <code>返回值</code>  <code>包名.类名.方法名称(方法的参数)</code> 异常)<br><img src="/blog-img/Spring/aspectj.jpg" alt="切入点表达式"></p><h3 id="表示切面的执行时间，使用的通知注解"><a href="#表示切面的执行时间，使用的通知注解" class="headerlink" title="表示切面的执行时间，使用的通知注解"></a>表示切面的执行时间，使用的通知注解</h3><ol><li><p><strong>@Before 前置通知</strong> 在目标方法之前先执行切面的功能</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span><span class="comment">//定义切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增强功能的方法</span></span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"execution(public void com.test.service.pack01.OneServiceImpl.sayHi())"</span>)</span><br><span class="line">    <span class="comment">//属性value表示切面执行的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在目标方法执行之前，例如输出日志"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@AfterReturning 后置通知</strong> 在目标方法之后执行的，能够获取到目标方法的返回值</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* returning是目标方法的返回值，命名与通知方法的形参名一致</span></span><br><span class="line"><span class="comment">        相当于 Object obj = sayHi(String,Integer)</span></span><br><span class="line"><span class="comment">          AfterReturning(obj)</span></span><br><span class="line"><span class="comment">        可以修改这个返回值，影响最后调用的结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"execution(* *..OneServiceImpl.sayHi(String,Integer))"</span>,returning = <span class="string">"obj"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterReturning</span><span class="params">(JoinPoint jp,Object obj)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*指定通知方法中的参数: JoinPoint</span></span><br><span class="line"><span class="comment">          JoinPoint（连接点）代表业务方法，要加入切面功能的业务方法 如sayHi</span></span><br><span class="line"><span class="comment">            作用是：可以在通知方法中获取方法执行时的信息，例如方法的名称，方法的实参。</span></span><br><span class="line"><span class="comment">            如果你的切面功能中需要用到方法的信息，就加入JoinPoint。</span></span><br><span class="line"><span class="comment">            这个JointPoint参数的值是由框架赋予，必须是第一个位置的参数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println("方法的签名（定义）="+jp.getSignature());</span></span><br><span class="line"><span class="comment">        System.out.println("方法的名称 ="+jp.getSignature().getName());</span></span><br><span class="line"><span class="comment">        //获取方法的实参</span></span><br><span class="line"><span class="comment">        Object args[] = jp.getArgs();</span></span><br><span class="line"><span class="comment">        for (Object arg:args</span></span><br><span class="line"><span class="comment">             ) &#123;</span></span><br><span class="line"><span class="comment">//可以用来判断目标方法的实参是否是想要的，然后再执行功能</span></span><br><span class="line"><span class="comment">            System.out.println("参数="+arg);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">if</span>(obj!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"见面时间"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@Around 环绕通知</strong> 在目标方法前和后都能增强功能，控制目标方法的的访问，修改返回值</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">       @Around: 环绕通知</span></span><br><span class="line"><span class="comment">         属性：value 切入点表达式</span></span><br><span class="line"><span class="comment">         位置；在方法的定义上面</span></span><br><span class="line"><span class="comment">        特点：</span></span><br><span class="line"><span class="comment">         1.它是功能最强的通知</span></span><br><span class="line"><span class="comment">         2.在目标方法的前和后都能增强功能</span></span><br><span class="line"><span class="comment">         3.控制目标方法是否被调用执行</span></span><br><span class="line"><span class="comment">         4.修改原来的目标方法的执行结果，影响最后调用的结果</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">        环绕通知等同与jdk动态代理的，InvocationHandler接口</span></span><br><span class="line"><span class="comment">           返回值就是目标方法的执行结果，可以被修改。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Around</span>(value = <span class="string">"execution(* *..OneServiceImpl.sayHi(String,Integer))"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">Around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       Object obj=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//目标方法前加入功能</span></span><br><span class="line">       System.out.println(<span class="string">"见面时间"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">       <span class="comment">//通过ProceedingJoinPoint.proceed对目标方法的调用</span></span><br><span class="line">       pjp.proceed();<span class="comment">//method.invoke();</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//目标方法后加入功能</span></span><br><span class="line">       System.out.println(<span class="string">"提交事务"</span>);</span><br><span class="line">       <span class="keyword">return</span> obj;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@AfterThrowing 异常通知</strong> 在目标方法抛出异常后执行的通知</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//throwing属性 用于指定发生的异常对象</span></span><br><span class="line"><span class="comment">//相当于try&#123;目标方法&#125;catch()&#123; myAfterThrowing(Throwable ex) &#125;</span></span><br><span class="line"><span class="meta">@AfterThrowing</span>(value = <span class="string">"execution(* *..OneServiceImpl.sayHi(String,Integer))"</span>,throwing = <span class="string">"ex"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterThrowing</span><span class="params">(Throwable ex)</span></span>&#123;</span><br><span class="line">    <span class="comment">//记录异常信息</span></span><br><span class="line">    System.out.println(<span class="string">"异常通知：异常发生时执行"</span>+ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@After 最终通知</strong> 总是会被执行的代码</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//相当于 try&#123;&#125;catch()&#123;&#125;finally&#123; myAfter() &#125;</span></span><br><span class="line"><span class="meta">@After</span>(value=<span class="string">"execution(* *..OneServiceImpl.sayHi(String,Integer))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@Pointcut</strong> 定义和管理切入点的辅助注解</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*@Pointcut : 定义和管理切入点，如果你的项目中有多个切入点表达式是重复的，可以复用的。</span></span><br><span class="line"><span class="comment">                    可以使用@Pointcut,统一管理切入点表达式。</span></span><br><span class="line"><span class="comment">       属性: value 切入点表达式</span></span><br><span class="line"><span class="comment">       位置: 在自定义的方法上面</span></span><br><span class="line"><span class="comment">      特点:</span></span><br><span class="line"><span class="comment">       当使用@Pointcut定义在一个方法的上面，此时这个方法就是切入点表达式的别名</span></span><br><span class="line"><span class="comment">       其他的通知中，value就可以使用这个方法代替切入点表达式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Pointcut</span>(value = <span class="string">"execution(* *..OneServiceImpl.sayHi(String,Integer))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//无需代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After</span>(value=<span class="string">"pointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理的使用方式</p><ol><li>如果目标类有接口，框架使用jdk动态代理,得到service对象是com.sun.proxy.$Proxy10</li><li>如果目标类没有接口，默认使用的cglib动态代理,得到service对象是com.test.service.pack04.OneServiceImpl$$EnhancerBySpringCGLIB$$eb85df45</li><li>有接口也可以强制使用cglib动态代理<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    声明自动代理对象：使用aspectj框架的功能，创建目标对象的代理对象。</span></span><br><span class="line"><span class="comment">    创建代理对象时在内存中实现的，修改目标对象的内存中的机构。</span></span><br><span class="line"><span class="comment">    使用目标对象就是被修改后的代理对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">如果你期望目标类有接口，但使用cglib代理</span></span><br><span class="line"><span class="comment">proxy-target-class="true" 告诉框架使用cglib动态代理</span></span><br><span class="line"><span class="comment">&lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>maven依赖</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="第4章-Spring集成Mybatis"><a href="#第4章-Spring集成Mybatis" class="headerlink" title="第4章 Spring集成Mybatis"></a><center>第4章 Spring集成Mybatis</center></h1><h2 id="整合的想法"><a href="#整合的想法" class="headerlink" title="整合的想法"></a>整合的想法</h2><p><strong>使用spring的ioc核心技术，把mybatis框架中使用的对象交给spring统一创建和管理。spring是容器，存放你项目中要使用的各种对象， 例如Service对象， Dao对象，工具类对象等等。</strong></p><h2 id="mybatis使用步骤"><a href="#mybatis使用步骤" class="headerlink" title="mybatis使用步骤"></a>mybatis使用步骤</h2><ol><li><p>定义dao接口 ，StudentDao,以及service接口和实现类</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">selectStudents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//service.....</span></span><br></pre></td></tr></table></figure></li><li><p>定义mapper文件 StudentDao.xml</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.JInterest.dao.StudentDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertStudent"</span>&gt;</span></span><br><span class="line">        insert into student values(#&#123;id&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudents"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        select id,name,email,age from student order by id desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义mybatis的主配置文件 mybatis.xml</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--settings：控制mybatis全局行为--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置mybatis输出日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--name:实体类所在的包名</span></span><br><span class="line"><span class="comment">            表示cn.JInterest.domain包中的类名就是别名</span></span><br><span class="line"><span class="comment">            你可以使用Student表示cn.JInterest.domain.Student</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.JInterest.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- sql mapper(sql映射文件)的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          name：是包名， 这个包中的所有mapper.xml一次都能加载</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.JInterest.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建dao的代理对象<br><code>StudentDao dao = SqlSession.getMapper(StudentDao.class);</code><br><code>List&lt;Student&gt; students  = dao.selectStudents();</code></p></li><li><p>要使用dao对象，需要使用getMapper()方法，<br>怎么能使用getMapper()方法，需要哪些条件<br>1)获取SqlSession对象， 需要使用SqlSessionFactory的openSession()方法。<br>2)创建SqlSessionFactory对象。 通过读取mybatis的主配置文件，能创建SqlSessionFactory对象<br>使用Factory能获取SqlSession，有了SqlSession就能有dao ，目的就是获取dao对象，最后service层调用dao对象</p></li><li><p>spring整合mabatis后的applicationContext.xml文件<br>使用阿里公司的Druid连接池，配置文档：<a href="https://github.com/alibaba/druid/wiki/DruidDataSource配置" target="_blank" rel="noopener">DruidDataSource配置</a></p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       把数据库的配置信息，写在一个独立的文件，编译修改数据库的配置内容</span></span><br><span class="line"><span class="comment">       让spring知道jdbc.properties文件的位置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明数据源DataSource, 作用是连接数据库的,代替了mybatis的连接方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--set注入给DruidDataSource提供连接数据库信息 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            使用属性配置文件中的数据，语法 $&#123;key&#125;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><span class="comment">&lt;!--setUrl()--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.passwd&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.max&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明的是mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--set注入，把数据库连接池付给了dataSource属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"myDataSource"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis主配置文件的位置</span></span><br><span class="line"><span class="comment">           configLocation属性是Resource类型，读取配置文件</span></span><br><span class="line"><span class="comment">           它的赋值，使用value，指定文件的路径，使用classpath:表示文件的位置</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        创建dao对象，使用SqlSession的getMapper（StudentDao.class）</span></span><br><span class="line"><span class="comment">        MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象 。</span></span><br><span class="line"><span class="comment">        org.apache.ibatis.binding.MapperProxy@9cd25ff</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定SqlSessionFactory对象的id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定包名， 包名是dao接口所在的包名。</span></span><br><span class="line"><span class="comment">            MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行</span></span><br><span class="line"><span class="comment">            一次getMapper()方法，得到每个接口的dao对象。</span></span><br><span class="line"><span class="comment">            创建好的dao对象放入到spring的容器中的。 dao对象的默认名称是 接口名首字母小写</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.JInterest.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"studentService"</span> <span class="attr">class</span>=<span class="string">"cn.JInterest.service.impl.StudentServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentDao"</span> <span class="attr">ref</span>=<span class="string">"studentDao"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>pom.xml</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.JInterest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spring_04-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring核心ioc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--做spring事务用到的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis和spring集成的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阿里公司的数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--目的是把src/main/java目录中的xml文件包含到输出结果中。输出到classes目录中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="交给spring的mybatis对象"><a href="#交给spring的mybatis对象" class="headerlink" title="交给spring的mybatis对象"></a>交给spring的mybatis对象</h2><ol><li>数据源DataSource,使用阿里公司的Druid连接池</li><li>SqlSessionFactory对象， 使用的SqlSessionFactoryBean在内部创建的SqlSessionFactory</li><li>Dao代理对象，使用的MapperScannConfigure，在这个类的内部，调用getMapper()，创建接口的Dao对象</li></ol><h1 id="第5章-Spring事务"><a href="#第5章-Spring事务" class="headerlink" title="第5章 Spring事务"></a><center>第5章 Spring事务</center></h1><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><ul><li>讲mysql的时候，提出了事务。 事务是指一组sql语句的集合， 集合中有多条sql语句可能是insert ， update ，select ，delete，<br>我们希望这些多个sql语句都能成功，或者都失败， 这些sql语句的执行是一致的，作为一个整体执行。</li></ul><h2 id="在什么时候想到使用事务"><a href="#在什么时候想到使用事务" class="headerlink" title="在什么时候想到使用事务"></a>在什么时候想到使用事务</h2><ul><li>当我的操作，涉及得到多个表，或者是多个sql语句的insert，update，delete。需要保证这些语句都是成功才能完成我的功能，<br>或者都失败，保证操作是符合要求的。</li></ul><ul><li>在java代码中写程序，控制事务，此时事务应该放在那里呢？<br>service类的业务方法上，因为业务方法会调用多个dao方法，执行多个sql语句</li></ul><h2 id="通常怎么处理事务"><a href="#通常怎么处理事务" class="headerlink" title="通常怎么处理事务"></a>通常怎么处理事务</h2><ul><li>jdbc访问数据库，处理事务  Connection conn ; conn.commit(); conn.rollback();</li><li>mybatis访问数据库，处理事务， SqlSession.commit();  SqlSession.rollback();</li><li>hibernate访问数据库，处理事务， Session.commit(); Session.rollback();</li></ul><h2 id="问题中事务的处理方式，有什么不足"><a href="#问题中事务的处理方式，有什么不足" class="headerlink" title="问题中事务的处理方式，有什么不足"></a>问题中事务的处理方式，有什么不足</h2><ol><li>不同的数据库访问技术，处理事务的对象，方法不同，需要了解不同数据库访问技术使用事务的原理</li><li>掌握多种数据库中事务的处理逻辑。什么时候提交事务，什么时候回顾事务</li><li>处理事务的多种方法。</li></ol><ul><li>总结： 就是多种数据库的访问技术，有不同的事务处理的机制，对象，方法。</li></ul><h2 id="怎么解决不足"><a href="#怎么解决不足" class="headerlink" title="怎么解决不足"></a>怎么解决不足</h2><ul><li>spring提供一种处理事务的统一模型， 能使用统一步骤，方式完成多种不同数据库访问技术的事务处理。<br>使用spring的事务处理机制，可以完成<strong>mybatis</strong>访问数据库的事务处理<br>使用spring的事务处理机制，可以完成<strong>hibernate</strong>访问数据库的事务处理。</li></ul><h2 id="处理事务，需要怎么做，做什么"><a href="#处理事务，需要怎么做，做什么" class="headerlink" title="处理事务，需要怎么做，做什么"></a>处理事务，需要怎么做，做什么</h2><p><strong>spring处理事务的模型，使用的步骤都是固定的。把事务使用的信息提供给spring就可以了</strong></p><ol><li><p>事务内部提交，回滚事务，使用的事务管理器对象，代替你完成commit，rollback事务管理器是一个接口和他的众多实现类。</p><ul><li><p>接口：<strong>PlatformTransactionManager</strong> ，定义了事务重要方法 commit ，rollback</p></li><li><p>实现类：spring把每一种数据库访问技术对应的事务处理类都创建好了。<br>mybatis访问数据库—spring创建好的是<strong>DataSourceTransactionManager</strong><br>hibernate访问数据库—-spring创建的是<strong>HibernateTransactionManager</strong></p></li><li><p>怎么使用：你需要告诉spring 你用是那种数据库的访问技术，怎么告诉spring呢？<br>声明数据库访问技术对于的事务管理器实现类， 在spring的配置文件中使用<code>&lt;bean&gt;</code>声明就可以了<br>例如，你要使用mybatis访问数据库，你应该在xml配置文件中<br><code>&lt;bean id=“xxx&quot; class=&quot;...DataSourceTransactionManager&quot;&gt;</code></p></li></ul></li><li><p>你的业务方法需要什么样的事务，说明需要事务的类型。<br>说明方法需要的事务：</p><ol><li><p>事务的隔离级别：有4个值。<br> DEFAULT：采用 DB 默认的事务隔离级别。MySql 的默认为 REPEATABLE_READ； Oracle默认为 READ_COMMITTED。<br> ➢ READ_UNCOMMITTED：读未提交。未解决任何并发问题。<br> ➢ READ_COMMITTED：读已提交。解决脏读，存在不可重复读与幻读。<br> ➢ REPEATABLE_READ：可重复读。解决脏读、不可重复读，存在幻读<br> ➢ SERIALIZABLE：串行化。不存在并发问题。</p></li><li><p>事务的超时时间： 表示一个方法最长的执行时间，如果方法执行时超过了时间，事务就回滚。<br>   单位是秒， 整数值， 默认是 <code>-1</code>. (涉及因素多，一般默认)</p></li><li><p>事务的传播行为 ： 控制业务方法是不是有事务的， 是什么样的事务的。<br>7个传播行为，表示你的业务方法调用时，事务在方法之间是如果使用的。<br>掌握以下三个：</p><ul><li>PROPAGATION_REQUIRED(指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事<br>务，则创建一个新事务。)<br><img src="/blog-img/Spring/PROPAGATION_REQUIRED.jpg" alt="PROPAGATION_REQUIRED"></li><li>PROPAGATION_REQUIRES_NEW(指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。)<br><img src="/blog-img/Spring/PROPAGATION_REQUIRES_SUPPORTS.jpg" alt="PROPAGATION_REQUIRES_SUPPORTS"></li><li>PROPAGATION_SUPPORTS(总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。)<br><img src="/blog-img/Spring/PROPAGATION_REQUIRES_NEW.jpg" alt="PROPAGATION_REQUIRES_NEW"></li></ul></li></ol></li><li><p>spring提交事务，回滚事务的时机</p><ol><li><p>当你的业务方法，执行成功，没有异常抛出，当方法执行完毕，spring在方法执行后提交事务。事务管理器commit</p></li><li><p>当你的业务方法抛出<strong>运行时异常或ERROR</strong>， spring执行<strong>回滚</strong>，调用事务管理器的rollback<br>运行时异常的定义： RuntimeException  和他的子类都是运行时异常， 例如NullPointException , NumberFormatException</p></li><li><p>当你的业务方法抛出<strong>非运行时异常</strong>， 主要是受查异常时，<strong>提交</strong>事务<br>受查异常：在你写代码中，必须处理的异常。例如IOException, SQLException</p></li></ol></li></ol><h2 id="spring框架中提供的事务处理方案"><a href="#spring框架中提供的事务处理方案" class="headerlink" title="spring框架中提供的事务处理方案"></a>spring框架中提供的事务处理方案</h2><ol><li><p>适合中小项目使用的， 注解方案。<br>spring框架自己用aop实现给业务方法增加事务的功能， 使用<strong>@Transactional</strong>注解增加事务。<strong>@Transactional</strong>注解是spring框架自己注解，放在<strong>public方法</strong>的上面，表示当前方法具有事务。<br>可以给注解的属性赋值，表示具体的<strong>隔离级别，传播行为，异常信息</strong>等等</p><ul><li>使用<strong>@Transactional</strong>的步骤：</li></ul><ol><li><p>需要声明事务管理器对象<br><code>&lt;bean id=&quot;xx&quot; class=&quot;DataSourceTransactionManager&quot;&gt;</code></p></li><li><p>开启事务注解驱动， 告诉spring框架，我要使用注解的方式管理事务。<br><code>&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt;</code><br>spring使用aop机制，创建<strong>@Transactional</strong>所在的类代理对象，给方法加入事务的功能。<br>在你的业务方法执行之前，先开启事务，在业务方法之后提交或回滚事务，使用aop的环绕通知</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">rollbackFor:表示发生指定的异常一定回滚.</span></span><br><span class="line"><span class="comment">   处理逻辑是：</span></span><br><span class="line"><span class="comment">      1) spring框架会首先检查方法抛出的异常是不是在rollbackFor的属性值中</span></span><br><span class="line"><span class="comment">      2) 如果你的抛出的异常不在rollbackFor列表中，spring会判断异常是不是RuntimeException,</span></span><br><span class="line"><span class="comment">             如果是一定回滚。    </span></span><br><span class="line"><span class="comment">  @Transactional(</span></span><br><span class="line"><span class="comment">           propagation = Propagation.REQUIRED,</span></span><br><span class="line"><span class="comment">           isolation = Isolation.DEFAULT,</span></span><br><span class="line"><span class="comment">           readOnly = false,</span></span><br><span class="line"><span class="comment">           rollbackFor = &#123;</span></span><br><span class="line"><span class="comment">                   NullPointerException.class,  NotEnoughException.class</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">   )*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"你要增加的事务功能的业务方法名称"</span>)</span><br><span class="line"><span class="function">Object <span class="title">myAround</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="comment">//开启事务，spring给你开启</span></span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">    buy(<span class="number">1001</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//spring的事务管理器.commit();</span></span><br><span class="line"> &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"><span class="comment">//spring的事务管理器.rollback();</span></span><br><span class="line"> &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>适合大型项目，有很多的类，方法，需要大量的配置事务，使用aspectj框架功能，在spring配置文件中声明类，方法需要的事务。这种方式业务方法和事务配置完全分离。</p><p>实现步骤： 都是在xml配置文件中实现。 </p><ol><li><p>要使用的是aspectj框架，需要加入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>声明事务管理器对象</li></ol><p><code>&lt;bean id=&quot;xx&quot; class=&quot;DataSourceTransactionManager&quot;&gt;</code></p><ol start="3"><li><p>声明方法需要的事务类型（配置方法的事务属性【隔离级别，传播行为，超时】）</p></li><li><p>配置aop：指定哪些哪类要创建代理。</p></li></ol><p><strong>spring配置：</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">数据源配置</span></span><br><span class="line"><span class="comment">.....</span></span><br><span class="line"><span class="comment">.....</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明式事务处理：和源代码完全分离的--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.声明事务管理器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"myDataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.声明业务方法它的事务属性（隔离级别，传播行为，超时时间）</span></span><br><span class="line"><span class="comment">          id:自定义名称，表示 &lt;tx:advice&gt; 和 &lt;/tx:advice&gt;之间的配置内容的</span></span><br><span class="line"><span class="comment">          transaction-manager:事务管理器对象的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"myAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--tx:attributes：配置事务属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--tx:method：给具体的方法配置事务属性，method可以有多个，分别给不同的方法设置事务属性</span></span><br><span class="line"><span class="comment">                name:1）完整的方法名称，不带有包和类。</span></span><br><span class="line"><span class="comment">2）方法可以使用通配符,* 表示任意字符</span></span><br><span class="line"><span class="comment">                propagation：传播行为，枚举值</span></span><br><span class="line"><span class="comment">                isolation：隔离级别</span></span><br><span class="line"><span class="comment">                rollback-for：你指定的异常类名，全限定类名。 发生异常一定回滚</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"buy"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">rollback-for</span>=<span class="string">"java.lang.NullPointerException,cn.JInterest.except.NotEnoughException"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--使用通配符，指定很多的方法,从上往下匹配--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRES_NEW"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指定修改方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"modify*"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--删除方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"remove*"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--查询方法，query，search，find--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点表达式：指定哪些包中类，要使用事务</span></span><br><span class="line"><span class="comment">            id:切入点表达式的名称，唯一值</span></span><br><span class="line"><span class="comment">            expression：切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            com.crm.service</span></span><br><span class="line"><span class="comment">            com.service</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"servicePt"</span> <span class="attr">expression</span>=<span class="string">"execution(* *..service..*.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置增强器：关联adivce和pointcut</span></span><br><span class="line"><span class="comment">           advice-ref:通知，上面tx:advice哪里的配置</span></span><br><span class="line"><span class="comment">           pointcut-ref：切入点表达式的id</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"myAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePt"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="总结spring的事务"><a href="#总结spring的事务" class="headerlink" title="总结spring的事务"></a>总结spring的事务</h2><ol><li>管理事务的是 事务管理和他的实现类</li><li>spring的事务是一个统一模型<br> 1）指定要使用的事务管理器实现类，使用<code>&lt;bean&gt;</code><br> 2）指定哪些类，哪些方法需要加入事务的功能<br> 3）指定方法需要的隔离级别，传播行为，超时<br>你需要告诉spring，你的项目中类信息，方法的名称，方法的事务传播行为。</li></ol><h1 id="第6章-Web项目怎么使用容器对象"><a href="#第6章-Web项目怎么使用容器对象" class="headerlink" title="第6章 Web项目怎么使用容器对象"></a><center>第6章 Web项目怎么使用容器对象</center></h1><ul><li><p>web使用容器对象：<br>  servlet接受请求调用service层做数据操作</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请求数据...</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建spring的容器对象</span></span><br><span class="line">       String config= <span class="string">"spring.xml"</span>;</span><br><span class="line">       ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取service,处理业务</span></span><br><span class="line">StudentService service  = (StudentService) ctx.getBean(<span class="string">"studentService"</span>);</span><br><span class="line">service.addStudent(student);</span><br></pre></td></tr></table></figure><p>  需要的依赖</p>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet依赖 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- jsp依赖 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1-b03<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>因为web项目是在tomcat服务器上运行的。tomcat启动，项目就一直运行。如果用上面那种方式，获得一次请求就要创建一次ApplicationContext对象，然后把spring.xml文件中所有对象创建出来，同时发送100个请求就要创建100个，垃圾回收器还没来得及回收又创建了，这样很浪费内存</p><p>  <strong>解决方案：</strong> 容器对象创建一次， 把容器对象放入到全局作用域ServletContext中。<br>  <strong>实现：</strong> 使用监听器 当全局作用域对象被创建时 创建容器 存入ServletContext<br>  1）配置web.xml</p>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册监听器ContextLoaderListener</span></span><br><span class="line"><span class="comment">    监听器被创建对象后，会读取/WEB-INF/spring.xml</span></span><br><span class="line"><span class="comment">    为什么要读取文件：因为在监听器中要创建ApplicationContext对象，需要加载配置文件。</span></span><br><span class="line"><span class="comment">    /WEB-INF/applicationContext.xml就是监听器默认读取的spring配置文件路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    可以修改默认的文件位置，使用context-param重新指定文件的位置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    配置监听器：目的是创建容器对象，创建了容器对象， 就能把spring.xml配置文件中的所有对象都创建好。</span></span><br><span class="line"><span class="comment">    用户发起请求就可以直接使用对象了。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- contextConfigLocation:表示配置文件的路径  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--自定义配置文件的路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  2)加入监听器依赖</p>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  3)servlet接受请求调用service层做数据操作</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用框架中的方法，获取容器对象</span></span><br><span class="line">WebApplicationContext ctx = <span class="keyword">null</span>;</span><br><span class="line">        ServletContext sc = getServletContext();</span><br><span class="line">        ctx = WebApplicationContextUtils.getRequiredWebApplicationContext( sc );</span><br><span class="line">        System.out.println(<span class="string">"容器对象的信息========"</span>+ctx);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取service,处理业务</span></span><br><span class="line">StudentService service  = (StudentService) ctx.getBean(<span class="string">"studentService"</span>);</span><br><span class="line">service.addStudent(student);</span><br></pre></td></tr></table></figure></li><li><p>WebApplicationContext底层实现<br>查其源码，看其调用关系，就可看到其是从 ServletContext 中读取的属性值，即 Spring容器。<br>  <img src="/blog-img/Spring/ServletContext%E4%B8%AD%E8%AF%BB%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC.jpg" alt=""><br>  (容器对象在 ServletContext 的中存放的 key 为 WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE。)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/posts/Mybatis/"/>
      <url>/posts/Mybatis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="第一章-框架概述"><a href="#第一章-框架概述" class="headerlink" title="第一章 框架概述"></a><center>第一章 框架概述</center></h1><h2 id="软件开发常用结构"><a href="#软件开发常用结构" class="headerlink" title="软件开发常用结构"></a>软件开发常用结构</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><div class="note info">            <p>界面层（User Interface layer）、业务逻辑层（Business Logic Layer）、数据访问层（Data access layer）</p>          </div><ul><li><p><strong>三层的职责:</strong></p><ol><li>界面层（表示层，视图层）：主要功能是接受用户的数据，显示请求的处理结果。使用 web 页面和<br>用户交互，手机 app 也就是表示层的，用户在 app 中操作，业务逻辑在服务器端处理。</li><li>业务逻辑层：接收表示传递过来的数据，检查数据，计算业务逻辑，调用数据访问层获取数据。</li><li>数据访问层：与数据库打交道。主要实现对数据的增、删、改、查。将存储在数据库中的数据提交<br>给业务层，同时将业务层处理的数据保存到数据库</li></ol></li></ul><ul><li><p><strong>三层的处理请求的交互：</strong></p><div class="note info">            <p>用户—&gt; 界面层—&gt;业务逻辑层—&gt;数据访问层—&gt;DB 数据库</p>          </div><p><img src="/blog-img/Mybatis/pasted-3.png" alt="upload successful"></p></li><li><p><strong>为什么要使用三层？</strong></p><ol><li>结构清晰、耦合度低, 各层分工明确</li><li>可维护性高，可扩展性高</li><li>有利于标准化</li><li>开发人员可以只关注整个结构中的其中某一层的功能实现</li><li>有利于各层逻辑的复用</li></ol></li></ul><h3 id="常用框架"><a href="#常用框架" class="headerlink" title="常用框架"></a>常用框架</h3><ul><li><p><strong>常见的 J2EE 中开发框架：</strong></p><blockquote><p>MyBatis 框架：<br>MyBatis 是一个优秀的基于 java 的持久层框架，内部封装了 jdbc，开发者只需要关注 sql 语句<br>本身，而不需要处理加载驱动、创建连接、创建 statement、关闭连接，资源等繁杂的过程。<br>MyBatis 通过 xml 或注解两种方式将要执行的各种 sql 语句配置起来，并通过 java 对象和 sql 的<br>动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射为 java<br>对象并返回。</p></blockquote><blockquote><p>Spring 框架：<br>Spring 框架为了解决软件开发的复杂性而创建的。Spring 使用的是基本的 JavaBean 来完成以前<br>非常复杂的企业级开发。Spring 解决了业务对象，功能模块之间的耦合，不仅在 javase,web 中使用，<br>大部分 Java 应用都可以从 Spring 中受益。<br>Spring 是一个轻量级控制反转(IoC)和面向切面(AOP)的容器。</p></blockquote><blockquote><p>SpringMVC 框架<br>Spring MVC 属于 SpringFrameWork 3.0 版本加入的一个模块，为 Spring 框架提供了构建 Web<br>应用程序的能力。现在可以 Spring 框架提供的 SpringMVC 模块实现 web 应用开发，在 web 项目中<br>可以无缝使用 Spring 和 Spring MVC 框架。</p></blockquote></li></ul><h2 id="框架是什么"><a href="#框架是什么" class="headerlink" title="框架是什么"></a>框架是什么</h2><ul><li><p><strong>框架定义</strong></p><blockquote><p>框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方<br>法;另一种认为，框架是可被应用开发者定制的应用骨架、模板。<br>简单的说，框架其实是半成品软件，就是一组组件，供你使用完成你自己的系统。从另一个角度来<br>说框架一个舞台，你在舞台上做表演。在框架基础上加入你要完成的功能。<br>框架安全的，可复用的，不断升级的软件。</p></blockquote></li><li><p><strong>框架解决的问题</strong></p><blockquote><p>框架要解决的最重要的一个问题是技术整合，在 J2EE 的 框架中，有着各种各样的技术，不同的应<br>用，系统使用不同的技术解决问题。需要从 J2EE 中选择不同的技术，而技术自身的复杂性，有导致更<br>大的风险。企业在开发软件项目时，主要目的是解决业务问题。 即要求企业负责技术本身，又要求解<br>决业务问题。这是大多数企业不能完成的。框架把相关的技术融合在一起，企业开发可以集中在业务领<br>域方面。<br>另一个方面可以提供开发的效率。</p></blockquote></li></ul><h2 id="JDBC-编程"><a href="#JDBC-编程" class="headerlink" title="JDBC 编程"></a>JDBC 编程</h2><ul><li><p><strong>使用 JDBC 编程的回顾</strong>(展开查看代码)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//注册 mysql 驱动 MySQL8.0 连接(com.mysql.cj.jdbc.Driver)</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据的基本信息 url ，username，password</span></span><br><span class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/springdb"</span>;<span class="comment">//MySQL8.0 需要加上  ?useSSL=false&amp;amp;serverTimezone=UTC</span></span><br><span class="line">String username = <span class="string">"root"</span>;</span><br><span class="line">String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接对象</span></span><br><span class="line">conn = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存查询结果</span></span><br><span class="line">List&lt;Student&gt; stuList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 Statement, 用来执行 sql 语句</span></span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行查询，创建记录集，</span></span><br><span class="line">rs = stmt.executeQuery(<span class="string">"select * from student"</span>);</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">stu.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">stu.setAge(rs.getInt(<span class="string">"age"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//从数据库取出数据转为 Student 对象，封装到 List 集合</span></span><br><span class="line">stuList.add(stu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span>) ;</span><br><span class="line">&#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">stmt.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 JDBC 的缺陷</strong></p><ol><li>代码比较多，开发效率低</li><li>需要关注 Connection ,Statement, ResultSet 对象创建和销毁</li><li>对 ResultSet 查询的结果，需要自己封装为 List</li><li>重复的代码比较多些</li><li>业务代码和数据库的操作混在一起</li></ol></li></ul><h2 id="MyBatis-框架概述"><a href="#MyBatis-框架概述" class="headerlink" title="MyBatis 框架概述"></a>MyBatis 框架概述</h2><blockquote><p>MyBatis 框架：<br>MyBatis 本是 apache 的一个开源项目 iBatis, 2010 年这个项目由 apache software foundation 迁<br>移到了 google code，并且改名为 MyBatis 。2013 年 11 月迁移到 Github。<br>iBATIS 一词来源于“internet”和“abatis”的组合，是一个基于 Java 的持久层框架。iBATIS 提供的<br>持久层框架包括 SQL Maps 和 Data Access Objects（DAOs）<br>当前，最新版本是 MyBatis 3.5.1 ，其发布时间是 2019 年 4 月 8 日。</p></blockquote><ul><li><strong>MyBatis 解决的主要问题</strong><ul><li><mark>减轻使用 JDBC 的复杂性，不用编写重复的创建 Connetion , Statement ; 不用编写关闭资源代码。直接使用 java 对象，表示结果数据。让开发者专注 SQL 的处理。 其他分心的工作由 MyBatis 代劳。</mark></li></ul></li></ul><h1 id="第二章-MyBatis-框架快速入门"><a href="#第二章-MyBatis-框架快速入门" class="headerlink" title="第二章 MyBatis 框架快速入门"></a><center>第二章 MyBatis 框架快速入门</center></h1><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><p><strong>使用 Mybatis 准备</strong></p><blockquote><p>下载 mybatis<br><a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a></p></blockquote><p><strong>搭建 MyBatis 开发环境</strong></p><ol><li><p>创建 mysql 数据库和相关的表</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line"> <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line"> <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"> PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></li><li><p>创建 maven 工程 </p><p> <img src="/blog-img/Mybatis/pasted-4.png" alt="upload successful"></p></li><li><p>加入依赖和插件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    对于MAVEN项目，Eclipse会自动把项目src\main\java\目录下的配置文件（.xml）和</span></span><br><span class="line"><span class="comment">    资源文件(.properties)搬运到target目录下，而intellij idea默认是不会帮我们做这件事的,</span></span><br><span class="line"><span class="comment">    所以需要加以下配置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--编译时跳过单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写 Student 实体类<br> 在domain包下创建</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="comment">//属性名和列名一样 </span></span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="comment">// set ,get , toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写 Dao 接口 StudentDao<br> 在dao包下创建</p>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/*查询所有数据*/</span></span><br><span class="line">  <span class="function">List&lt;Student&gt; <span class="title">selectStudents</span><span class="params">()</span></span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>编写 Dao 接口 Mapper 映射文件 StudentDao.xml</p><p>要求：</p><ol><li><p>在 dao 包中创建文件 StudentDao.xml</p></li><li><p>要 StudentDao.xml 文件名称和接口 StudentDao 一样，区分大小写。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">             namespace：必须有值，自定义的唯一字符串 </span></span><br><span class="line"><span class="comment">             推荐使用：dao 接口的全限定名称 </span></span><br><span class="line"><span class="comment">        --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.test.dao.StudentDao"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            &lt;select&gt;: 查询数据， 标签中必须是 select 语句</span></span><br><span class="line"><span class="comment">            id: sql 语句的自定义名称，推荐使用 dao 接口中方法名称， </span></span><br><span class="line"><span class="comment">            使用名称表示要执行的 sql 语句</span></span><br><span class="line"><span class="comment">            resultType: 查询语句的返回结果数据类型，使用全限定类名 </span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudents"</span> <span class="attr">resultType</span>=<span class="string">"com.test.domain.Student"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--要执行的 sql 语句--&gt;</span></span><br><span class="line">            select id,name,email,age from student</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>创建 MyBatis 主配置文件</p><p>项目 src/main 下创建 resources 目录，设置 resources 目录为 resources root<br>创建主配置文件：名称为 mybatis.xml<br>说明：主配置文件名称是自定义的，内容如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置 mybatis 环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--id:数据源的名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务类型：使用 JDBC 事务（使用 Connection 的提交和回滚）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据源 dataSource：创建数据库 Connection 对象</span></span><br><span class="line"><span class="comment">                type: POOLED 使用数据库的连接池 </span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的四个要素--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mydbtest?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>serverTimezone=GMT"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--告诉 mybatis 要执行的 sql 语句的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com\test\mapper\StudentMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建测试类 MyBatisTest</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStart</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">     String config = <span class="string">"mybatis-config.xml"</span>;<span class="comment">//1.mybatis 主配置文件 </span></span><br><span class="line"></span><br><span class="line">     InputStream in = Resources.getResourceAsStream(config); <span class="comment">//2.读取配置文件 </span></span><br><span class="line"></span><br><span class="line">     SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);<span class="comment">//3.创建 SqlSessionFactory 对象,目的是获取 SqlSession </span></span><br><span class="line"></span><br><span class="line">     SqlSession session = factory.openSession(); <span class="comment">//4.获取 SqlSession,SqlSession 能执行 sql 语句</span></span><br><span class="line"></span><br><span class="line">     List&lt;Student&gt; studentList =session.selectList(<span class="string">"com.test.dao.StudentDao.selectStudents"</span>);<span class="comment">//5.执行 SqlSession 的 selectList("namespace.id")</span></span><br><span class="line"></span><br><span class="line">     studentList.forEach( student -&gt; System.out.println(student)); <span class="comment">//6.循环输出查询结果 </span></span><br><span class="line"></span><br><span class="line">     session.close();<span class="comment">//7.关闭 SqlSession，释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置日志功能</p><p>mybatis.xml 文件加入日志配置，可以在控制台输出执行的 sql 语句和参数</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="基本的-CURD"><a href="#基本的-CURD" class="headerlink" title="基本的 CURD"></a>基本的 CURD</h2><blockquote><p>insert ,update ,delete , selectOne（查询一个）</p></blockquote><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><ol><li><p>StudentDao 接口中增加方法</p><p>  <code>int insertStudent(Student student);</code></p></li><li><p>StudentDao.xml 加入 sql 语句</p>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertStudent"</span>&gt;</span></span><br><span class="line"> insert into student(id,name,email,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>增加测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       </span><br><span class="line">        String config = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream in =Resources.getResourceAsStream(config);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setId(<span class="number">1005</span>);</span><br><span class="line">        student.setName(<span class="string">"张三"</span>);</span><br><span class="line">        student.setEmail(<span class="string">"zhangsan@163.com"</span>);</span><br><span class="line">        student.setAge(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//执行插入 insert</span></span><br><span class="line">       <span class="keyword">int</span> rows =session.insert(<span class="string">"com.test.dao.StudentDao.insertStudent"</span>,student);</span><br><span class="line">        <span class="comment">//MyBatis默认情况下是手动提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        System.out.println(<span class="string">"增加记录的行数:"</span>+rows);</span><br><span class="line">        <span class="comment">//8.关闭 SqlSession</span></span><br><span class="line">        session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3><pre><code>删改查操作类似，只需要在mapper文件中写sql语句就可以了</code></pre><h2 id="主要类的介绍"><a href="#主要类的介绍" class="headerlink" title="主要类的介绍"></a>主要类的介绍</h2><ol><li><p><strong>Resources</strong>： mybatis中的一个类， 负责读取主配置文件</p><pre><code>InputStream in = Resources.getResourceAsStream(&quot;mybatis.xml&quot;); </code></pre></li><li><p><strong>SqlSessionFactoryBuilder</strong>: 创建SqlSessionFactory对象</p><pre><code>SqlSessionFactoryBuilder builder  = new SqlSessionFactoryBuilder();//创建SqlSessionFactory对象 SqlSessionFactory factory = builder.build(in); </code></pre></li><li><p><strong>SqlSessionFactory</strong> ：重量级对象，程序创建一个对象耗时比较长，使用资源    比较多。在整个项目中，有一个就够用了。<br> SqlSessionFactory: 接口实现类：DefaultSqlSessionFactory<br>SqlSessionFactory作用：获取SqlSession对象, SqlSession sqlSession = factory.openSession()<br> openSession()方法说明：</p><pre><code>1. openSession()：无参数的，获取是非自动提交事务的SqlSession对象2. openSession(boolean):         openSession(true) 获取自动提交事务的SqlSession.         openSession(false) 非自动提交事务的SqlSession对象</code></pre></li></ol><ol start="4"><li><p><strong>SqlSession</strong>: </p><p> SqlSession接口 ：定义了操作数据的方法 例如 selectOne() ,selectList() ,insert(),update(), delete(), commit(), rollback()</p><pre><code>SqlSession接口的实现类DefaultSqlSession。</code></pre><p>  使用要求： SqlSession对象不是线程安全的，需要在方法内部使用， 在执行sql语句之前，使用openSession()获取SqlSession对象。</p><pre><code>在执行完sql语句后，需要关闭它，执行SqlSession.close(). 这样能保证他的使用是线程安全的。</code></pre></li></ol><h2 id="传统-Dao-开发方式的分析"><a href="#传统-Dao-开发方式的分析" class="headerlink" title="传统 Dao 开发方式的分析"></a>传统 Dao 开发方式的分析</h2><blockquote><p>Dao 的实现类其实并没有干什么实质性的工作，它仅仅就是通过 SqlSession 的相关 API 定位到映射文件 mapper 中相应 id 的 SQL 语句，真正对 DB 进行操作的工作其实是由框架通过 mapper 中的 SQL 完成的。</p></blockquote><blockquote><p>所以，MyBatis 框架就抛开了 Dao 的实现类，直接定位到映射文件 mapper 中的相应 SQL 语句，对DB 进行操作。这种对 Dao 的实现方式称为 Mapper 的动态代理方式。</p></blockquote><blockquote><p>Mapper 动态代理方式无需程序员实现 Dao 接口。接口是由 MyBatis 结合映射文件自动生成的动态代<br>理实现的。</p></blockquote><h1 id="第3章-MyBatis-框架-Dao-代理"><a href="#第3章-MyBatis-框架-Dao-代理" class="headerlink" title="第3章 MyBatis 框架 Dao 代理"></a><center>第3章 MyBatis 框架 Dao 代理</center></h1><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul><li><p>使用SqlSession.getMapper(dao接口.class) 获取这个dao接口的对象</p><p> <code>SqlSession session = factory.openSession();</code><br>  <code>StudentDao dao = session.getMapper(StudentDao.class);</code></p><p> 得到的是MapperProxy 对象（具体看源码）</p></li></ul><p><img src="/blog-img/Mybatis/pasted-5.png" alt="upload successful"></p><h2 id="传入参数-了解"><a href="#传入参数-了解" class="headerlink" title="传入参数(了解)"></a>传入参数(了解)</h2><p><strong>从java代码中把数据传入到mapper文件的sql语句中。</strong></p><ol><li><p><strong>parameterType</strong> ：<br> 写在mapper文件中的 一个属性。 表示dao接口中方法的参数的数据类型。</p> <div class="note warning">            <p>mapper文件中 parameterType一般省略不写，mybatis能自动识别。</p>          </div> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;select&gt;中parameterType可以不写</span></span><br><span class="line"><span class="comment">                  resultType必须有</span></span><br><span class="line"><span class="comment">        &lt;insert&gt;&lt;update&gt;&lt;delete&gt;中通常只写 id 属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultType</span>=<span class="string">"com.test.domain.Student"</span>&gt;</span></span><br><span class="line">    select * from t_student where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>一个简单类型的参数</strong>：</p><p> 简单类型： mybatis把java的<strong>基本数据类型</strong>和<strong>String</strong>都叫简单类型。<br> 在mapper文件获取简单类型的一个参数的值，使用 #{<strong>任意字符</strong>}</p><p> <strong>接口</strong>：<code>public Student  selectStudentById(Integer id)</code><br> <strong>mapper</strong>:<code>select id,name, email,age from student where id=#{studentId}</code></p></li><li><p><strong>多个参数，使用java对象</strong></p><pre><code>vo: value object , 放一些存储数据的类。比如说 提交请求参数， name ,age 现在想把name ,age 传给一个service 类。vo: view object , 从servlet把数据返回给浏览器使用的类，表示显示结果的类。pojo: 普通的有set， get方法的java类。 普通的java对象Servlet --- StudentService( addStudent( MyParam  param)  )entity（domain域）: 实体类， 和数据库中的表对应的类</code></pre><p> <em>语法 #{对象中的属性名}</em></p><p> <strong>接口方法</strong>：<br> <code>List&lt;Student&gt; find(Student s)</code><br> <strong>mapper 文件</strong>：<br> <code>&lt;select id=&quot;addStu&quot; &gt;</code><br> <code>select id,name,email,age from student where name=#{sname} or age = #{sage}</code><br> <code>&lt;/select&gt;</code></p></li><li><p><strong>多个参数，使用Map</strong></p><p>Map 集合可以存储多个值，使用Map向 mapper 文件一次传入多个参数。Map 集合使用 String的 key，<br>Object 类型的值存储参数。 mapper 文件使用 # { key } 引用参数值。</p><p>例如：<br><code>Map&lt;String,Object&gt; data = new HashMap&lt;String,Object&gt;();</code><br><code>data.put(“myname”,”李力”);</code><br><code>data.put(“myage”,20);</code><br><strong>接口方法</strong>：<br><code>List&lt;Student&gt; selectMultiMap(Map&lt;String,Object&gt; map);</code><br><strong>mapper 文件</strong>：<br><code>&lt;select id=&quot;selectMultiMap&quot; resultType=&quot;com.test.domain.Student&quot;&gt;</code><br><code>select id,name,email,age from student where name=#{myname} or age =#{myage}</code><br><code>&lt;/select&gt;</code></p></li><li><p><strong>#{}和${}区别</strong></p><ul><li><p><strong>#</strong>使用 <code>？</code>在sql语句中做站位的， 使用PreparedStatement执行sql，效率高</p></li><li><p><strong>#</strong>能够避免sql注入，更安全。</p></li><li><p><strong>$</strong>不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低</p></li><li><p><strong>$</strong>有sql注入的风险，缺乏安全性。</p></li><li><p><strong>$</strong>:可以替换表名或者列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">select</span> <span class="keyword">id</span> , <span class="keyword">name</span>, email , age <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'#'</span>&#123;studentId&#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">#&#123;&#125; 的结果： select id , name, email , age from student where id = ? </span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">select</span> <span class="keyword">id</span> , <span class="keyword">name</span>, email , age <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span> = $ &#123;studentId&#125;</span><br><span class="line"></span><br><span class="line"> $&#123;&#125; 的结果：</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">id</span> , <span class="keyword">name</span> , email , age <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">1001</span></span><br><span class="line">相当于：</span><br><span class="line">  <span class="keyword">String</span> <span class="keyword">sql</span>=<span class="string">"select id ,name , email ,age from student where id="</span> + <span class="string">"1001"</span>;</span><br><span class="line"> </span><br><span class="line"> $:可以替换表名或者列名， 你能确定数据是安全的。可以使用$</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="mybatis的输出结果"><a href="#mybatis的输出结果" class="headerlink" title="mybatis的输出结果"></a>mybatis的输出结果</h2><ul><li>mybatis执行了sql语句，得到java对象。</li></ul><h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><ol><li><p>指sql语句执行完毕后,数据转为的java对象,java类型是任意的。<br>resultType结果类型的它值 (1)类型的全限定名称 (2)类型的别名， 例如 java.lang.Integer别名是int</p><p> <strong>处理方式：</strong></p><ol><li><p>mybatis执行sql语句， 然后mybatis调用类的无参数构造方法，创建对象。</p></li><li><p>mybatis把ResultSet指定列值付给同名的属性。<br><code>&lt;select id=&quot;selectMultiPosition&quot; resultType=&quot;com.bjpowernode.domain.Student&quot;&gt;</code><br><code>select id,name, email,age from student</code><br><code>&lt;/select&gt;</code></p><p>对等的jdbc:<br>ResultSet rs = executeQuery(“ select id,name, email,age from student” )<br> while(rs.next()){</p><pre><code>Student  student = new Student();student.setId(rs.getInt(&quot;id&quot;));student.setName(rs.getString(&quot;name&quot;))</code></pre><p>}</p></li></ol></li><li><p>定义自定义类型的别名</p><ol><li>在mybatis主配置文件中定义，使<code>&lt;typeAlias&gt;</code>定义别名</li><li>可以在resultType中使用自定义别名<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--为mapper映射文件中的domain起别名--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;typeAlias type="com.test.domain.Student" alias="stu" /&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--package 批量起别名 系统取好了，别名为类名（区分大小写）--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.test.domain"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap:"></a>resultMap:</h3><ul><li><p>结果映射， 指定列名和java对象的属性对应关系。</p><ol><li><p>你自定义列值赋值给哪个属性</p></li><li><p>当你的列名和属性名不一样时，一定使用resultMap</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">数据库表不变，现在有一个类属性名和字段对应不上的情况</span></span><br><span class="line"><span class="comment">type：指定一个类型，与数据库表一一对应，建立起表字段和类属性的名字一一匹配的关系</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"stuMap"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id:定义主键</span></span><br><span class="line"><span class="comment">property:类中的属性名</span></span><br><span class="line"><span class="comment">column: 表中的字段名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"sid"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sname"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sage"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll2"</span> <span class="attr">resultMap</span>=<span class="string">"stuMap"</span>&gt;</span></span><br><span class="line">select * from t_student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>resultMap和resultType不要一起用，二选一</p></li></ul><h1 id="第4章-MyBatis-框架动态-SQL"><a href="#第4章-MyBatis-框架动态-SQL" class="headerlink" title="第4章 MyBatis 框架动态 SQL"></a><center>第4章 MyBatis 框架动态 SQL</center></h1><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><blockquote><p>sql的内容是变化的，可以根据条件获取到不同的sql语句。<strong>主要是where部分发生变化。</strong></p></blockquote><p><strong>动态sql的实现:</strong> 使用mybatis提供的标签，<code>&lt;if&gt; ,&lt;where&gt;,&lt;foreach&gt;</code></p><ol><li><p><code>&lt;if&gt;</code>是判断条件的，语法</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"判断java对象的属性值"</span>&gt;</span></span><br><span class="line">           部分sql语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;where&gt;</code>用来包含 多个<code>&lt;if&gt;</code>的,当多个if有一个成立的,<code>&lt;where&gt;</code>会自动增加一个where关键字,并去掉 if中多余的 and ,or等。</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"find"</span> <span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">       select * from t_student</span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           where搭配if标签使用  通过if标签来判断</span></span><br><span class="line"><span class="comment">           如果查询条件不匹配 则不在sql中加where关键字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           where 忽略第一个and</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and name!=''"</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--'%'中间加空格--&gt;</span></span><br><span class="line">               and name like '%' #&#123;name&#125; '%'</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address!=null and address!=''"</span>&gt;</span></span><br><span class="line">               and address like '%' #&#123;address&#125; '%'</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;foreach&gt;</code> 循环java中的数组，list集合的。 主要用在sql的in语句中。</p><p> <code>&lt;foreach collection=&quot;&quot; item=&quot;&quot; open=&quot;&quot; close=&quot;&quot; separator=&quot;&quot;&gt;</code><br> <code>#{xxx}</code><br> <code>&lt;/foreach&gt;</code></p><blockquote><p>collection:表示接口中的方法参数的类型， 如果是数组使用array , 如果是list集合使用list<br>   item:自定义的，表示数组和集合成员的变量<br>   open:循环开始时的字符<br>   close:循环结束时的字符<br>   separator:集合成员之间的分隔符</p></blockquote><p> 例如：学生id是 1001,1002,1003的三个学生<br>  select * from student where id in (1001,1002,1003)</p><figure class="highlight xml"><figcaption><span>java</span></figcaption><table><tr><td class="code"><pre><span class="line">public List<span class="tag">&lt;<span class="name">Student</span>&gt;</span> selectByidS(List<span class="tag">&lt;<span class="name">Integer</span>&gt;</span> idlist)</span><br><span class="line"></span><br><span class="line">List<span class="tag">&lt;<span class="name">Integer</span>&gt;</span> list = new ...</span><br><span class="line">list.add(1001);</span><br><span class="line">list.add(1002);</span><br><span class="line">list.add(1003);</span><br><span class="line"></span><br><span class="line">dao.selectByids(list)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByIds"</span> <span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">      select * from t_student</span><br><span class="line">      where id in</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">          #&#123;id&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>sql代码片段,就是复用一些语法,代替重复性高，且复杂的子查询</p><p> 步骤<br> 1.先定义 <code>&lt;sql id=&quot;自定义名称唯一&quot;&gt;  sql语句， 表名，字段等 &lt;/sql&gt;</code><br> 2.再使用，<code>&lt;include refid=&quot;id的值&quot; /&gt;</code></p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> &gt;</span></span><br><span class="line">   select * from t_student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectById3"</span> <span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectAll"</span> /&gt;</span> where id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>一般不用  会减低代码可读性</li></ul></li><li><p>… </p></li></ol><h1 id="第5章-MyBatis-配置文件（掌握）"><a href="#第5章-MyBatis-配置文件（掌握）" class="headerlink" title=" 第5章 MyBatis 配置文件（掌握）"></a><center> 第5章 MyBatis 配置文件（掌握）</center></h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用配置文件加载数据库连接属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;settings&gt;</span></span><br><span class="line"><span class="comment">        &lt;setting name="" value=""/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/settings&gt;</span></span><br><span class="line"><span class="comment">    设置与数据库交互环境</span></span><br><span class="line"><span class="comment">        例如可以在此处配置二级缓存，配置查询延迟加载策略等等。。</span></span><br><span class="line"><span class="comment">            配置的目的是为了更有效的查询表中的记录</span></span><br><span class="line"><span class="comment">            实际开发中基本没用 效果不明显 现在有其他策略</span></span><br><span class="line"><span class="comment">            基础操作</span></span><br><span class="line"><span class="comment">                对于常用的查询条件的字段，设置索引</span></span><br><span class="line"><span class="comment">            高级操作</span></span><br><span class="line"><span class="comment">                使用nosql数据库，redis</span></span><br><span class="line"><span class="comment">            专业操作</span></span><br><span class="line"><span class="comment">                Elasticsearch与Solr 针对于电商行业</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--为mapper映射文件中的domain起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="com.test.domain.Student" alias="stu" /&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--package 批量起别名 系统取好了，别名为类名（区分大小写）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.test.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置 mybatis 环境--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--id:数据源的名称--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--配置事务类型：使用 JDBC 事务（使用 Connection 的提交和回滚）--&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--数据源 dataSource：创建数据库 Connection 对象</span></span><br><span class="line"><span class="comment">                  type: POOLED 使用数据库的连接池 </span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!--使用`$&#123;&#125;`读取配置文件，连接数据库的四个要素--&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="com\test\dao\StudentDao.xml"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class="com.test.dao.StudentDao" /&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该包下的mapper映射文件自动注册--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.test.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第6章-扩展"><a href="#第6章-扩展" class="headerlink" title="第6章 扩展"></a><center>第6章 扩展</center></h1>]]></content>
      
      
      <categories>
          
          <category> java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> java框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea-Error(3, 32) java程序包不存在的问题</title>
      <link href="/posts/javaError1/"/>
      <url>/posts/javaError1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>问题：用maven配置，新建项目编译时提示以下错误信息：</strong><br><code>java: 程序包org.springframework.context不存在</code><br><code>java: 程序包org.springframework.context.support不存在</code></p><p><strong>原因：idea的Maven有没有勾选，没有的话勾上，然后ok，运行一下项目，等加载完成就ok了。不勾选的，项目是用IDEA实现的没有链到Maven，所以会出现包不存在。</strong></p><p><strong>解决：ctrl+shift+S 打开设置勾选</strong><br><img src="/blog-img/javaError2.png" alt="Alt text"></p>]]></content>
      
      
      <categories>
          
          <category> 问题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> 问题集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试执行多次，导致插入数据重复</title>
      <link href="/posts/javaError2/"/>
      <url>/posts/javaError2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>问题：在用单元测试代码时，重复执行，导致向数据库插入两次数据。</strong></p><p><strong>原因：单元测试时会先build进行编译，而build的时候会执行你项目中的所有加了@Test的方法。</strong></p><p><img src="/blog-img/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E9%87%8D%E5%A4%8D.jpg" alt="Alt text"></p><p><strong>解决：通过在pom.xml配置文件进行配置。</strong></p><blockquote><p><code>&lt;build&gt;</code><br>&emsp; <code>&lt;plugins&gt;</code><br>&emsp;&emsp;<code>&lt;plugin&gt;</code><br>&emsp;&emsp;&emsp;<code>&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</code><br>&emsp;&emsp;&emsp; <code>&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</code><br>&emsp;&emsp;&emsp;<code>&lt;configuration&gt;</code><br>&emsp;&emsp;&emsp;&emsp;  <code>&lt;skipTests&gt;true&lt;/skipTests&gt;</code><br>&emsp;&emsp;&emsp;  <code>&lt;/configuration&gt;</code><br>&emsp;&emsp; <code>&lt;/plugin&gt;</code><br>&emsp; <code>&lt;/plugins&gt;</code><br><code>&lt;/build&gt;</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 问题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题集 </tag>
            
            <tag> junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基础语法</title>
      <link href="/posts/Markdown/"/>
      <url>/posts/Markdown/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="认识Markdown"><a href="#认识Markdown" class="headerlink" title="认识Markdown"></a>认识Markdown</h1><blockquote><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。</p></blockquote><p>简单来说，一般我们用的字处理软件Word或Pages有大量的排版、字体设置，而Markdown是个非常容易学习的排版语法。</p><p>Markdown 的优点如下：</p><ul><li>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</li><li>让你专注于文字而不是排版。</li><li>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</li><li>Markdown 的标记语法有极好的可读性。</li></ul><h1 id="Markdown编辑工具"><a href="#Markdown编辑工具" class="headerlink" title="Markdown编辑工具"></a>Markdown编辑工具</h1><p>推荐新手使用<a href="https://maxiang.io/" target="_blank" rel="noopener">马克飞象 </a>编辑器，对新手极其友好。</p><p><img src="/blog-img/Markdown/1590415731146.png" alt="Alt text"></p><p>热爱编程和码字博客主也可以选择<a href="https://www.cnblogs.com/xueweihan/archive/2019/10/24/11728087.html" target="_blank" rel="noopener">这五款免费的Markdown编辑器</a></p><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h2><p>标题能显示出文章的结构。行首插入1-6个 # ，每增加一个 # 表示更深入层次的内容，对应到标题的深度由 1-6 阶。<strong>注意：需要在 # 后加一个空格，这是最标准的Markdown语法。</strong></p><p><img src="/blog-img/Markdown/1590417132717.png" alt="Alt text"></p><h2 id="2-文本样式"><a href="#2-文本样式" class="headerlink" title="2.文本样式"></a>2.文本样式</h2><p>（带“*”星号的文本样式，在原版Markdown标准中不存在，但在其大部分衍生标准中被添加）</p><p><img src="/blog-img/Markdown/1590417166411.png" alt="Alt text"></p><p>补充：markdowm首行缩进方法–一个空格<code>&amp;ensp;</code> 两个空格 <code>&amp;emsp;</code></p><h2 id="3-图片"><a href="#3-图片" class="headerlink" title="3.图片"></a>3.图片</h2><p>插入图片的语法就是在插入链接的语法前面加’!’。</p><p>插入网络上已存在的图片可以使用图床，这里推荐<a href="https://imgchr.com" target="_blank" rel="noopener">路过图床</a> ，生成URL地址即可。<strong>（以下使用马克飞象快捷键）</strong></p><p><img src="/blog-img/Markdown/1590418153960.png" alt="Alt text"></p><h2 id="4-注释"><a href="#4-注释" class="headerlink" title="4.注释"></a>4.注释</h2><ul><li><p><strong>html注释</strong></p><p>Markdown内嵌html语法，所以可以用html注释。</p><blockquote><p><code>&lt;!--哈哈我是注释，不会在浏览器中显示。--&gt;</code></p></blockquote></li><li><p><strong>hack方法</strong><br>hack方法就是利用markdown的解析原理来实现注释的。</p><blockquote><p><code>[comment]: &lt;&gt; (注释，不会在浏览器中显示。)</code><br><code>[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</code><br><code>[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</code><br><code>[//]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</code><br><code>[//]: # (哈哈我是注释，不会在浏览器中显示。)</code><br>可以用表情包形式注释，例如<br><code>[*_*]: 注释内容</code><br><code>[^_^]: 其中[]中的内容可以自定义</code><br><code>[@_@]: 但是这个注释在代码段中无效，只能在外部使用</code></p></blockquote></li></ul><h2 id="5-脚注"><a href="#5-脚注" class="headerlink" title="5.脚注"></a>5.脚注</h2><p> 脚注一般位于页面的底部，可以作为文档某处内容的注释.</p><blockquote><p>这里是脚注[^脚注]<br>[^脚注]: 这里是脚注的内容，”脚注”可以替换成数字或字母.</p></blockquote><h2 id="6-表格"><a href="#6-表格" class="headerlink" title="6.表格"></a>6.表格</h2><p> 表格的语法麻烦一点</p><p><code>| 测试  |   测试     | 测试   |</code><br><code>| :------- | :-------:| ----: |</code><br><code>|</code>:<code>表示左对齐|</code>::<code>表示居中 |</code>:<code>表示右对齐|</code></p><p>效果：</p><table><thead><tr><th align="left">测试</th><th align="center">测试</th><th align="right">测试</th></tr></thead><tbody><tr><td align="left"><code>:</code>表示左对齐</td><td align="center"><code>::</code>表示居中</td><td align="right"><code>:</code> 表示右对齐</td></tr></tbody></table><h2 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7.流程图"></a>7.流程图</h2><p><img src="/blog-img/Markdown/1590424467082.png" alt="Alt text"></p><p>以及时序图:</p><p><img src="/blog-img/Markdown/1590424554284.png" alt="Alt text"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>看到这里你应该熟悉了Markdown 的基本语法啦，然后可以去这个在线<a href="https://daringfireball.net/projects/markdown/dingus" target="_blank" rel="noopener">markdown-html在线转换上</a>练习，不用一小时就可以掌握了。</p>]]></content>
      
      
      <categories>
          
          <category> 编辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻量级标记语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloWorld</title>
      <link href="/posts/Myblog/"/>
      <url>/posts/Myblog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="我的第一个-博客！！！"><a href="#我的第一个-博客！！！" class="headerlink" title="我的第一个 博客！！！"></a>我的第一个 博客！！！</h1><p>使用hexo admin 快速部署博客<br><img src="/blog-img/pasted-0.png" alt="upload successful"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[language] [title] [url] [link text]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
